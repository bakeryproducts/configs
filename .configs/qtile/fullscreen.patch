diff --git a/libqtile/window.py b/libqtile/window.py
index bfe6ba75..72fcb047 100644
--- a/libqtile/window.py
+++ b/libqtile/window.py
@@ -146,6 +146,7 @@ class _Window(CommandObject):
         self.hidden = True
         self.group = None
         self.icons = {}
+        self.layout_state = None
         window.set_attribute(eventmask=self._window_mask)
 
         self._float_info = {
@@ -234,6 +235,12 @@ class _Window(CommandObject):
     @property
     def has_focus(self):
         return self == self.qtile.current_window
+    
+    def reset_layout_state(self):
+        self.layout_state = None
+
+    def set_layout_state(self, state):
+        self.layout_state = state
 
     def has_user_set_position(self):
         try:

diff --git a/libqtile/layout/xmonad.py b/libqtile/layout/xmonad.py
index 0149088c..cf155fe2 100644
--- a/libqtile/layout/xmonad.py
+++ b/libqtile/layout/xmonad.py
@@ -200,11 +200,23 @@ class MonadTall(_SimpleLayoutBase):
 
     def add(self, client):
         "Add client to layout"
-        self.clients.add(client, 0 if self.new_at_current else 1)
+        # Make sure layout wont crash if another layout puts its state
+        if isinstance(client.layout_state, int):
+            self.clients.add(client, client.layout_state)
+        else:
+            self.clients.add(client, 0 if self.new_at_current else 1)
+
+        # Make sure this state will be never reused
+        client.reset_layout_state()
+
         self.do_normalize = True
 
     def remove(self, client):
         "Remove client from layout"
+
+        index = self.clients.index(client)
+        client.set_layout_state(index)
+
         self.do_normalize = True
         return self.clients.remove(client)
 
